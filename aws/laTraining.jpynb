import sagemaker
from sagemaker.sklearn import SKLearn
from sagemaker.serializers import JSONSerializer
import pandas as pd
import numpy as np

# Generate sample data
n_samples = 1000

data = {
    'study_hours': np.array([5, 10, 15, 20, 25, 30, 35, 40, 12, 18, 22, 28, 32, 38, 42]),
    'attendance': np.array([80, 85, 90, 92, 94, 96, 98, 100, 87, 91, 93, 95, 97, 99, 100]),
    'previous_grade': np.array([70, 75, 80, 85, 87, 89, 91, 93, 78, 82, 86, 88, 90, 92, 95]),
    'project_score': np.array([75, 80, 85, 88, 90, 92, 94, 96, 82, 86, 89, 91, 93, 95, 97]),
    'quiz_average': np.array([78, 82, 86, 88, 90, 92, 94, 96, 80, 84, 87, 89, 91, 94, 97]),
    'study_group_hours': np.array([5, 6, 7, 8, 9, 10, 11, 12, 6, 7, 8, 9, 10, 11, 13]),
    'tutorial_attendance': np.array([60, 65, 70, 75, 80, 85, 90, 95, 68, 72, 77, 83, 87, 92, 98]),
    'sleep_hours': np.array([7, 7.5, 8, 8.5, 9, 9.5, 10, 10, 7.8, 8.2, 8.6, 9, 9.4, 9.8, 10]),
    'stress_level': np.array([3, 4, 5, 5.5, 6, 6.5, 7, 7, 4.2, 5, 5.8, 6.4, 6.8, 7.2, 7.5]),
    'extracurricular_hours': np.array([4, 5, 6, 7, 8, 9, 10, 10, 5.2, 6, 7, 8.2, 9, 9.5, 10]),
    'final_grade': np.array([72, 77, 82, 86, 89, 91, 94, 96, 79, 83, 87, 90, 92, 95, 98])
}

df = pd.DataFrame(data)
df.to_csv('training_data.csv', index=False)
print("Training data saved successfully")

# Initialize SageMaker session
session = sagemaker.Session()

# Create SKLearn Estimator
sklearn_estimator = SKLearn(
    entry_point='model.py',
    instance_type='ml.m5.large',
    framework_version='0.23-1',
    role="",
    instance_count=1,
    py_version='py3',
    hyperparameters={
        "verbosity": 20
    }
)

# Upload training data
inputs = session.upload_data(path='training_data.csv', key_prefix='training')
print("Data uploaded to S3")

# Train the model
sklearn_estimator.fit({'training': inputs})
print("Model training completed")

# Deployment - Be free my darling
predictor = sklearn_estimator.deploy(
    initial_instance_count=1,
    instance_type='ml.m5.large',
    serializer=JSONSerializer()
)

# This is for the endpoint name.
endpoint_name = predictor.endpoint_name
print(f"Model deployed at endpoint: {endpoint_name}")

# Just testing the model here
test_data = {
    'studyHours': 20,
    'attendance': 85,
    'previousGrade': 75,
    'projectScore': 88,
    'quizAverage': 82,
    'studyGroupHours': 5,
    'tutorialAttendance': 90,
    'sleepHours': 7,
    'stressLevel': 5,
    'extracurricularHours': 10
}

# Make a prediction
result = predictor.predict(test_data)
print(f"\nTest prediction successful!")
print(f"Input: {test_data}")
print(f"Predicted grade: {result}")